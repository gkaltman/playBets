Running and stopping the application:

Use Java 8.

Start with:    java -jar playWithBets.jar
Or start with: java -jar playWithBets.jar httpserver.port=8002
Stop with:     CTRL+C or kill. The shutdown hook should activate and close the app cleanly.
Main-class:    AppStarter

Design choices:
1. Because the application is CPU bound, the number of threads used to serve requests is set to Runtime.getRuntime().availableProcessors().
2. In order to minimize memory, for each bet offer we keep a max of 20 (or other value) stakes. The highest.
3. In order to maximize performance, the stakes for a betoffer are kept in a TreeSet, the add and remove operations are O(log n).
4. Because the stakes are kept forever and the specification does not show any way to release memory, a circuit breaker was added.
The implemented circuit breaker is dummy (stop accepting stake posts if the number of stakes exceeds a hardcoded threashold).
5. In order to improve performance in a multi-threaded environment, ReentrantReadWriteLocks were used, which allow for many readers in the same time.
6. For easy testing, without Spring, the "beans" are injected manually at application start up.

Libraries:
1. For the http server, I used what was in the spec: com.sun.net.httpserver.HttpServer.
2. For testing, I used junit and httpclient.

Github:
To clone the project: https://github.com/gkaltman/playBets